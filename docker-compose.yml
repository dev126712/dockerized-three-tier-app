services:
  api-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_app_tier
    networks:
      - ${DOCKER_NETWORK} 
    ports:
      - 8080:8080
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: ${DATABASE_URL} # <-- This is needed
      PORT: ${API_SERVER_PORT_MAPPING} # <-- Match the port mapping

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web_presentation_tier
    networks:
      - ${DOCKER_NETWORK} 
    ports:
      - 8000:8000
    depends_on:
      - api-server

  mongo:
    image: mongo:4.4
    container_name: cont-mongodb
    ports:
      - 27017:27017
    networks:
      - ${DOCKER_NETWORK} 
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    restart: unless-stopped

    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ping: 1})" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s # Wait 10 seconds before starting checks


  mongo-express:
    image: mongo-express
    container_name: mon-expr-cont
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: ${MONGODB_EXPRESS_SERVER}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_EXPRESS_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_EXPRESS_PASSWORD}
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      mongo:
        condition: service_healthy

networks:
  ${DOCKER_NETWORK}:
    driver: bridge
